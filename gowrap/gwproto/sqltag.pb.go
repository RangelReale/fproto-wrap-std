// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sqltag.proto

package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SQLTag struct {
	TagDisable   bool   `protobuf:"varint,1,opt,name=tag_disable,json=tagDisable" json:"tag_disable,omitempty"`
	TagFieldname string `protobuf:"bytes,2,opt,name=tag_fieldname,json=tagFieldname" json:"tag_fieldname,omitempty"`
}

func (m *SQLTag) Reset()                    { *m = SQLTag{} }
func (m *SQLTag) String() string            { return proto.CompactTextString(m) }
func (*SQLTag) ProtoMessage()               {}
func (*SQLTag) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SQLTag) GetTagDisable() bool {
	if m != nil {
		return m.TagDisable
	}
	return false
}

func (m *SQLTag) GetTagFieldname() string {
	if m != nil {
		return m.TagFieldname
	}
	return ""
}

var E_Sqltag = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*SQLTag)(nil),
	Field:         6710,
	Name:          "fproto_wrap.sqltag",
	Tag:           "bytes,6710,opt,name=sqltag",
	Filename:      "sqltag.proto",
}

func init() {
	proto.RegisterType((*SQLTag)(nil), "fproto_wrap.SQLTag")
	proto.RegisterExtension(E_Sqltag)
}

func init() { proto.RegisterFile("sqltag.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0x89, 0x45, 0xd0, 0xcd, 0xd9, 0xc4, 0x26, 0x08, 0x62, 0xd0, 0x26, 0xcd, 0xed, 0x82,
	0x7f, 0x10, 0x2c, 0x45, 0x6c, 0x14, 0xc5, 0xd5, 0xca, 0xe6, 0x98, 0x5c, 0x26, 0xe3, 0xc2, 0x5e,
	0x26, 0x66, 0xe7, 0xb8, 0x6f, 0xe6, 0xe7, 0x93, 0x64, 0x0d, 0x5c, 0xf5, 0x86, 0xc7, 0x7b, 0xf3,
	0x7e, 0x6a, 0x11, 0x7e, 0xbc, 0x00, 0xe9, 0x7e, 0x60, 0xe1, 0x3c, 0x6b, 0x27, 0x5d, 0xed, 0x06,
	0xe8, 0x4f, 0x4b, 0x62, 0x26, 0x8f, 0x66, 0xb2, 0xea, 0x6d, 0x6b, 0x1a, 0x0c, 0xeb, 0xc1, 0xf5,
	0xc2, 0x43, 0x8c, 0x5f, 0xbc, 0xaa, 0xf4, 0xe3, 0xfd, 0xe5, 0x13, 0x28, 0x3f, 0x57, 0x99, 0x00,
	0xad, 0x1a, 0x17, 0xa0, 0xf6, 0x58, 0x24, 0x65, 0x52, 0x1d, 0x5a, 0x25, 0x40, 0x8f, 0xd1, 0xc9,
	0x2f, 0xd5, 0xf1, 0x18, 0x68, 0x1d, 0xfa, 0xa6, 0x83, 0x0d, 0x16, 0x07, 0x65, 0x52, 0x1d, 0xd9,
	0x85, 0x00, 0x3d, 0xcd, 0xde, 0xfd, 0xb3, 0x4a, 0x23, 0x4e, 0x7e, 0xa6, 0xe3, 0xb8, 0x9e, 0xc7,
	0xf5, 0x94, 0x7a, 0xeb, 0xc5, 0x71, 0x17, 0x8a, 0xdf, 0x9b, 0x32, 0xa9, 0xb2, 0xab, 0x13, 0xbd,
	0xc7, 0xab, 0x23, 0x8a, 0xfd, 0x7f, 0xf1, 0x70, 0xf7, 0x75, 0x4b, 0x4e, 0xbe, 0xb7, 0xb5, 0x5e,
	0xf3, 0xc6, 0x58, 0xe8, 0x08, 0xbd, 0x45, 0xf0, 0x68, 0x62, 0x69, 0x39, 0x96, 0x96, 0x41, 0x1a,
	0x43, 0x3c, 0x9e, 0x86, 0x76, 0x71, 0x2c, 0x9d, 0xe4, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0x1d, 0xd2, 0x29, 0x1b, 0x01, 0x00, 0x00,
}
