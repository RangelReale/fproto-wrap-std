// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/RangelReale/fproto-wrap-std/options.proto

package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FProtoWrapOptions struct {
	Wrap bool `protobuf:"varint,1,opt,name=wrap" json:"wrap,omitempty"`
}

func (m *FProtoWrapOptions) Reset()                    { *m = FProtoWrapOptions{} }
func (m *FProtoWrapOptions) String() string            { return proto.CompactTextString(m) }
func (*FProtoWrapOptions) ProtoMessage()               {}
func (*FProtoWrapOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FProtoWrapOptions) GetWrap() bool {
	if m != nil {
		return m.Wrap
	}
	return false
}

var E_FprotoWrap = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*FProtoWrapOptions)(nil),
	Field:         6600,
	Name:          "fproto_wrap.fproto_wrap",
	Tag:           "bytes,6600,opt,name=fproto_wrap,json=fprotoWrap",
	Filename:      "github.com/RangelReale/fproto-wrap-std/options.proto",
}

func init() {
	proto.RegisterType((*FProtoWrapOptions)(nil), "fproto_wrap.FProtoWrapOptions")
	proto.RegisterExtension(E_FprotoWrap)
}

func init() {
	proto.RegisterFile("github.com/RangelReale/fproto-wrap-std/options.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0x4a, 0xcc, 0x4b, 0x4f, 0xcd, 0x09, 0x4a, 0x4d,
	0xcc, 0x49, 0xd5, 0x4f, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2d, 0x2f, 0x4a, 0x2c, 0xd0, 0x2d,
	0x2e, 0x49, 0xd1, 0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6, 0x03, 0x0b, 0x0b, 0x71, 0x43,
	0xa4, 0xe3, 0x41, 0xd2, 0x52, 0x0a, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0xa1, 0xa4,
	0xd2, 0x34, 0xfd, 0x94, 0xd4, 0xe2, 0xe4, 0xa2, 0xcc, 0x82, 0x92, 0xfc, 0x22, 0x88, 0x72, 0x25,
	0x75, 0x2e, 0x41, 0xb7, 0x00, 0x10, 0x2b, 0xbc, 0x28, 0xb1, 0xc0, 0x1f, 0x62, 0x92, 0x90, 0x10,
	0x17, 0x0b, 0x48, 0xbb, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x98, 0x6d, 0x15, 0xc7, 0x85,
	0x6c, 0xb2, 0x90, 0x8c, 0x1e, 0xc4, 0x68, 0x3d, 0x98, 0xd1, 0x7a, 0x6e, 0x99, 0x39, 0xa9, 0x50,
	0x03, 0x24, 0x4e, 0x18, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0xc9, 0xe9, 0x21, 0x69, 0xd1, 0xc3, 0xb0,
	0x27, 0x88, 0x0b, 0x22, 0x0d, 0x12, 0x72, 0x32, 0x8f, 0x32, 0x25, 0xd2, 0xbf, 0xe9, 0xf9, 0x20,
	0xa6, 0x7e, 0x7a, 0x39, 0xc4, 0x6a, 0x36, 0x30, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x4d,
	0x05, 0xa3, 0x88, 0x2f, 0x01, 0x00, 0x00,
}
